[%
var classes = EClass.all;
var colors = Sequence{"azure", "beige", "floralwhite", "lemonchiffon", "mistyrose", "palegreen", "pink", "wheat", "plum"};
%]
digraph G {
	graph[splines=ortho, K=0.5]
	node[fontname=Arial, fontsize=10, shape=record, style=filled]
	edge[fontname=Arial, fontsize=10, arrowsize=0.7]			
	
	[%for (c in classes) { %]
	
		[%=c.getNodeName()%][label="{[%=c.name%]| [%=c.eStructuralFeatures.collect(f|f.getLabel()+"\\l").concat("")%]}", fillcolor="[%=colors.get(c.eContainer().eContents().indexOf(c).mod(colors.size()))%]"]
		
		[** Create edges for the supertypes of the class **]
		[%for (s in c.eSuperTypes.select(s|classes.includes(s))){%]
			[%=s.getNodeName()%]->[%=c.getNodeName()%][name="[%=s.getNodeName()%]-isSuperTypeOf-[%=c.getNodeName()%]", arrowtail="empty", dir="back", arrowsize=0.9]
		[%}%]
	[%}%]
	

	[%for (r in getUnidirectionalReferences()) {%]
		[%var c = r.eContainer;%]
		[%if (r.containment){%]
			[%=c.getNodeName()%]->[%=r.eType.getNodeName()%][arrowtail=[%=r.getArrowTail()%],tooltip="[%=r.name%]",name="[%=r.getIdentifier()%]", dir=back];
		[%}else{%]
			[%=c.getNodeName()%]->[%=r.eType.getNodeName()%][arrowhead=[%=r.getArrowHead()%],tooltip="[%=r.name%]",name="[%=r.getIdentifier()%]"];
		[%}%]
	[%}%]
	[%for (r in getBidirectionalReferences()) {%]
		[%var c = r.eContainer;%]
		[%=c.getNodeName()%]->[%=r.eType.getNodeName()%][arrowtail=[%=r.getArrowHead()%],arrowhead=[%=r.getArrowTail()%],tooltip="[%=r.name%]",name="[%=r.getIdentifier()%]", dir=both];
	[%}%]
	
}

[%

operation EReference getEdgeLabel() {
	var label = "";
	if (self.isDerived()) label = "/" + label;
	label += self.name + self.getEdgeMultiplicityLabel();
	return label;
}

operation EReference getEdgeMultiplicityLabel() {
	if (self.isMany()) {
		return self.getMultiplicityLabel();
	}
	else {
		return "[" + self.lowerBound + ".." + self.upperBound + "]";
	}
}

operation EStructuralFeature getMultiplicityLabel() {
	var label = "";
	if (self.isMany) {
		label += "[";
		if (self.lowerBound <> 0) label += self.lowerBound + "..";
		if (self.upperBound == -1) {
			label += "*";
		}
		else {
			label += self.upperBound;
		}
		label += "]";
	}
	return label;
}

operation EClass getLabel() {
	/*
	var fillcolor = "#fffcdc";
	var label = "<table cellspacing='0' cellborder='0' cellpadding='1' bgcolor='" + fillcolor + "'>";
	var features = self.eStructuralFeatures;
	
	label += "<tr><td sides='B' colspan='2' border='1'>" + 
		"<table border='0' cellspacing='0' cellborder='0' cellpading='0'>" + 
		"<tr><td align='right' valign='middle'></td>" + 
		"<td align='left' valign='middle'>" + self.name + "</td></tr></table></td></tr>";
	
	label += "<tr><td></td><td></td></tr>";
	
	for (f in features.sortBy(f|f.name.toLowerCase())) {
		label += "<tr>";
		label += "<td align='left'>" + f.getLabel() + "</td>";
		label += "</tr>";
	}
	
	if (features.isEmpty()){
		label += "<tr>";
		label += "<td> </td><td> </td>";
		label += "</tr>";
	}
	
	label += "</table>";
	return label;*/
	return "";
}

operation EStructuralFeature getLabel() {
	var label = self.name;
	if (self.isDerived()) label = "/" + label;
	if (self.eType.isDefined()) label += " : " + self.eType.name;
	label += self.getMultiplicityLabel();
	label += "  ";
	return label; 
}

operation EReference getArrowHead() {
	if (self.eOpposite.isDefined() and self.eOpposite.containment) {
		return "diamond";
	}
	return "open";
}

operation EReference getArrowTail() {
	if (self.containment) {
		return "diamond";
	}
	else {
		if (self.eOpposite.isDefined()) {
			return "open";
		}
		else {
			return "none";
		}
	}
	
}

operation EReference getIdentifier() {
	return self.eContainingClass.name + "_" + self.name;
}

@cached
operation getUnidirectionalReferences() {
	var bidirectionalReferences = getBidirectionalReferences();
	return getVisibleReferences().excludingAll(bidirectionalReferences).
		excludingAll(bidirectionalReferences.eOpposite);
}

@cached
operation getBidirectionalReferences() {
	var references = getVisibleReferences();
	return references.select(r|r.eOpposite.isDefined() and references.indexOf(r) < references.indexOf(r.eOpposite));
}

@cached
operation getVisibleReferences() { 
	return EReference.all;
}

operation EClass getNodeName() {
	return "_" + self.name;
}

operation EReference getNodeName() {
	return "_" + self.eContainer.name + "_" + self.name;
}

%]
